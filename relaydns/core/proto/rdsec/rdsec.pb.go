// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.10
// 	protoc        (unknown)
// source: relaydns/core/proto/rdsec/rdsec.proto

package rdsec

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type ProtocolVersion int32

const (
	ProtocolVersion_PROTOCOL_VERSION_1 ProtocolVersion = 0
)

// Enum value maps for ProtocolVersion.
var (
	ProtocolVersion_name = map[int32]string{
		0: "PROTOCOL_VERSION_1",
	}
	ProtocolVersion_value = map[string]int32{
		"PROTOCOL_VERSION_1": 0,
	}
)

func (x ProtocolVersion) Enum() *ProtocolVersion {
	p := new(ProtocolVersion)
	*p = x
	return p
}

func (x ProtocolVersion) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ProtocolVersion) Descriptor() protoreflect.EnumDescriptor {
	return file_relaydns_core_proto_rdsec_rdsec_proto_enumTypes[0].Descriptor()
}

func (ProtocolVersion) Type() protoreflect.EnumType {
	return &file_relaydns_core_proto_rdsec_rdsec_proto_enumTypes[0]
}

func (x ProtocolVersion) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ProtocolVersion.Descriptor instead.
func (ProtocolVersion) EnumDescriptor() ([]byte, []int) {
	return file_relaydns_core_proto_rdsec_rdsec_proto_rawDescGZIP(), []int{0}
}

type Identity struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	PublicKey     []byte                 `protobuf:"bytes,2,opt,name=public_key,json=publicKey,proto3" json:"public_key,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Identity) Reset() {
	*x = Identity{}
	mi := &file_relaydns_core_proto_rdsec_rdsec_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Identity) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Identity) ProtoMessage() {}

func (x *Identity) ProtoReflect() protoreflect.Message {
	mi := &file_relaydns_core_proto_rdsec_rdsec_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Identity.ProtoReflect.Descriptor instead.
func (*Identity) Descriptor() ([]byte, []int) {
	return file_relaydns_core_proto_rdsec_rdsec_proto_rawDescGZIP(), []int{0}
}

func (x *Identity) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Identity) GetPublicKey() []byte {
	if x != nil {
		return x.PublicKey
	}
	return nil
}

type ClientInitPayload struct {
	state            protoimpl.MessageState `protogen:"open.v1"`
	Version          ProtocolVersion        `protobuf:"varint,1,opt,name=version,proto3,enum=rdsec.ProtocolVersion" json:"version,omitempty"`
	Nonce            []byte                 `protobuf:"bytes,2,opt,name=nonce,proto3" json:"nonce,omitempty"`
	Timestamp        int64                  `protobuf:"varint,3,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	Identity         *Identity              `protobuf:"bytes,4,opt,name=identity,proto3" json:"identity,omitempty"`
	Alpn             string                 `protobuf:"bytes,5,opt,name=alpn,proto3" json:"alpn,omitempty"`
	SessionPublicKey []byte                 `protobuf:"bytes,6,opt,name=session_public_key,json=sessionPublicKey,proto3" json:"session_public_key,omitempty"`
	unknownFields    protoimpl.UnknownFields
	sizeCache        protoimpl.SizeCache
}

func (x *ClientInitPayload) Reset() {
	*x = ClientInitPayload{}
	mi := &file_relaydns_core_proto_rdsec_rdsec_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ClientInitPayload) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClientInitPayload) ProtoMessage() {}

func (x *ClientInitPayload) ProtoReflect() protoreflect.Message {
	mi := &file_relaydns_core_proto_rdsec_rdsec_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClientInitPayload.ProtoReflect.Descriptor instead.
func (*ClientInitPayload) Descriptor() ([]byte, []int) {
	return file_relaydns_core_proto_rdsec_rdsec_proto_rawDescGZIP(), []int{1}
}

func (x *ClientInitPayload) GetVersion() ProtocolVersion {
	if x != nil {
		return x.Version
	}
	return ProtocolVersion_PROTOCOL_VERSION_1
}

func (x *ClientInitPayload) GetNonce() []byte {
	if x != nil {
		return x.Nonce
	}
	return nil
}

func (x *ClientInitPayload) GetTimestamp() int64 {
	if x != nil {
		return x.Timestamp
	}
	return 0
}

func (x *ClientInitPayload) GetIdentity() *Identity {
	if x != nil {
		return x.Identity
	}
	return nil
}

func (x *ClientInitPayload) GetAlpn() string {
	if x != nil {
		return x.Alpn
	}
	return ""
}

func (x *ClientInitPayload) GetSessionPublicKey() []byte {
	if x != nil {
		return x.SessionPublicKey
	}
	return nil
}

type SignedPayload struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Data          []byte                 `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
	Signature     []byte                 `protobuf:"bytes,2,opt,name=signature,proto3" json:"signature,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SignedPayload) Reset() {
	*x = SignedPayload{}
	mi := &file_relaydns_core_proto_rdsec_rdsec_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SignedPayload) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SignedPayload) ProtoMessage() {}

func (x *SignedPayload) ProtoReflect() protoreflect.Message {
	mi := &file_relaydns_core_proto_rdsec_rdsec_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SignedPayload.ProtoReflect.Descriptor instead.
func (*SignedPayload) Descriptor() ([]byte, []int) {
	return file_relaydns_core_proto_rdsec_rdsec_proto_rawDescGZIP(), []int{2}
}

func (x *SignedPayload) GetData() []byte {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *SignedPayload) GetSignature() []byte {
	if x != nil {
		return x.Signature
	}
	return nil
}

type ServerInitPayload struct {
	state            protoimpl.MessageState `protogen:"open.v1"`
	Version          ProtocolVersion        `protobuf:"varint,1,opt,name=version,proto3,enum=rdsec.ProtocolVersion" json:"version,omitempty"`
	Nonce            []byte                 `protobuf:"bytes,2,opt,name=nonce,proto3" json:"nonce,omitempty"`
	Timestamp        int64                  `protobuf:"varint,3,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	Identity         *Identity              `protobuf:"bytes,4,opt,name=identity,proto3" json:"identity,omitempty"`
	Alpn             string                 `protobuf:"bytes,5,opt,name=alpn,proto3" json:"alpn,omitempty"`
	SessionPublicKey []byte                 `protobuf:"bytes,6,opt,name=session_public_key,json=sessionPublicKey,proto3" json:"session_public_key,omitempty"`
	unknownFields    protoimpl.UnknownFields
	sizeCache        protoimpl.SizeCache
}

func (x *ServerInitPayload) Reset() {
	*x = ServerInitPayload{}
	mi := &file_relaydns_core_proto_rdsec_rdsec_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ServerInitPayload) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ServerInitPayload) ProtoMessage() {}

func (x *ServerInitPayload) ProtoReflect() protoreflect.Message {
	mi := &file_relaydns_core_proto_rdsec_rdsec_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ServerInitPayload.ProtoReflect.Descriptor instead.
func (*ServerInitPayload) Descriptor() ([]byte, []int) {
	return file_relaydns_core_proto_rdsec_rdsec_proto_rawDescGZIP(), []int{3}
}

func (x *ServerInitPayload) GetVersion() ProtocolVersion {
	if x != nil {
		return x.Version
	}
	return ProtocolVersion_PROTOCOL_VERSION_1
}

func (x *ServerInitPayload) GetNonce() []byte {
	if x != nil {
		return x.Nonce
	}
	return nil
}

func (x *ServerInitPayload) GetTimestamp() int64 {
	if x != nil {
		return x.Timestamp
	}
	return 0
}

func (x *ServerInitPayload) GetIdentity() *Identity {
	if x != nil {
		return x.Identity
	}
	return nil
}

func (x *ServerInitPayload) GetAlpn() string {
	if x != nil {
		return x.Alpn
	}
	return ""
}

func (x *ServerInitPayload) GetSessionPublicKey() []byte {
	if x != nil {
		return x.SessionPublicKey
	}
	return nil
}

var File_relaydns_core_proto_rdsec_rdsec_proto protoreflect.FileDescriptor

const file_relaydns_core_proto_rdsec_rdsec_proto_rawDesc = "" +
	"\n" +
	"%relaydns/core/proto/rdsec/rdsec.proto\x12\x05rdsec\"9\n" +
	"\bIdentity\x12\x0e\n" +
	"\x02id\x18\x01 \x01(\tR\x02id\x12\x1d\n" +
	"\n" +
	"public_key\x18\x02 \x01(\fR\tpublicKey\"\xe8\x01\n" +
	"\x11ClientInitPayload\x120\n" +
	"\aversion\x18\x01 \x01(\x0e2\x16.rdsec.ProtocolVersionR\aversion\x12\x14\n" +
	"\x05nonce\x18\x02 \x01(\fR\x05nonce\x12\x1c\n" +
	"\ttimestamp\x18\x03 \x01(\x03R\ttimestamp\x12+\n" +
	"\bidentity\x18\x04 \x01(\v2\x0f.rdsec.IdentityR\bidentity\x12\x12\n" +
	"\x04alpn\x18\x05 \x01(\tR\x04alpn\x12,\n" +
	"\x12session_public_key\x18\x06 \x01(\fR\x10sessionPublicKey\"A\n" +
	"\rSignedPayload\x12\x12\n" +
	"\x04data\x18\x01 \x01(\fR\x04data\x12\x1c\n" +
	"\tsignature\x18\x02 \x01(\fR\tsignature\"\xe8\x01\n" +
	"\x11ServerInitPayload\x120\n" +
	"\aversion\x18\x01 \x01(\x0e2\x16.rdsec.ProtocolVersionR\aversion\x12\x14\n" +
	"\x05nonce\x18\x02 \x01(\fR\x05nonce\x12\x1c\n" +
	"\ttimestamp\x18\x03 \x01(\x03R\ttimestamp\x12+\n" +
	"\bidentity\x18\x04 \x01(\v2\x0f.rdsec.IdentityR\bidentity\x12\x12\n" +
	"\x04alpn\x18\x05 \x01(\tR\x04alpn\x12,\n" +
	"\x12session_public_key\x18\x06 \x01(\fR\x10sessionPublicKey*)\n" +
	"\x0fProtocolVersion\x12\x16\n" +
	"\x12PROTOCOL_VERSION_1\x10\x00B\x87\x01\n" +
	"\tcom.rdsecB\n" +
	"RdsecProtoP\x01Z:github.com/gosuda/relaydns/relaydns/core/proto/rdsec;rdsec\xa2\x02\x03RXX\xaa\x02\x05Rdsec\xca\x02\x05Rdsec\xe2\x02\x11Rdsec\\GPBMetadata\xea\x02\x05Rdsecb\x06proto3"

var (
	file_relaydns_core_proto_rdsec_rdsec_proto_rawDescOnce sync.Once
	file_relaydns_core_proto_rdsec_rdsec_proto_rawDescData []byte
)

func file_relaydns_core_proto_rdsec_rdsec_proto_rawDescGZIP() []byte {
	file_relaydns_core_proto_rdsec_rdsec_proto_rawDescOnce.Do(func() {
		file_relaydns_core_proto_rdsec_rdsec_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_relaydns_core_proto_rdsec_rdsec_proto_rawDesc), len(file_relaydns_core_proto_rdsec_rdsec_proto_rawDesc)))
	})
	return file_relaydns_core_proto_rdsec_rdsec_proto_rawDescData
}

var file_relaydns_core_proto_rdsec_rdsec_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_relaydns_core_proto_rdsec_rdsec_proto_msgTypes = make([]protoimpl.MessageInfo, 4)
var file_relaydns_core_proto_rdsec_rdsec_proto_goTypes = []any{
	(ProtocolVersion)(0),      // 0: rdsec.ProtocolVersion
	(*Identity)(nil),          // 1: rdsec.Identity
	(*ClientInitPayload)(nil), // 2: rdsec.ClientInitPayload
	(*SignedPayload)(nil),     // 3: rdsec.SignedPayload
	(*ServerInitPayload)(nil), // 4: rdsec.ServerInitPayload
}
var file_relaydns_core_proto_rdsec_rdsec_proto_depIdxs = []int32{
	0, // 0: rdsec.ClientInitPayload.version:type_name -> rdsec.ProtocolVersion
	1, // 1: rdsec.ClientInitPayload.identity:type_name -> rdsec.Identity
	0, // 2: rdsec.ServerInitPayload.version:type_name -> rdsec.ProtocolVersion
	1, // 3: rdsec.ServerInitPayload.identity:type_name -> rdsec.Identity
	4, // [4:4] is the sub-list for method output_type
	4, // [4:4] is the sub-list for method input_type
	4, // [4:4] is the sub-list for extension type_name
	4, // [4:4] is the sub-list for extension extendee
	0, // [0:4] is the sub-list for field type_name
}

func init() { file_relaydns_core_proto_rdsec_rdsec_proto_init() }
func file_relaydns_core_proto_rdsec_rdsec_proto_init() {
	if File_relaydns_core_proto_rdsec_rdsec_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_relaydns_core_proto_rdsec_rdsec_proto_rawDesc), len(file_relaydns_core_proto_rdsec_rdsec_proto_rawDesc)),
			NumEnums:      1,
			NumMessages:   4,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_relaydns_core_proto_rdsec_rdsec_proto_goTypes,
		DependencyIndexes: file_relaydns_core_proto_rdsec_rdsec_proto_depIdxs,
		EnumInfos:         file_relaydns_core_proto_rdsec_rdsec_proto_enumTypes,
		MessageInfos:      file_relaydns_core_proto_rdsec_rdsec_proto_msgTypes,
	}.Build()
	File_relaydns_core_proto_rdsec_rdsec_proto = out.File
	file_relaydns_core_proto_rdsec_rdsec_proto_goTypes = nil
	file_relaydns_core_proto_rdsec_rdsec_proto_depIdxs = nil
}
